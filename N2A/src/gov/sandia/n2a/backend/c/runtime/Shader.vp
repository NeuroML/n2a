attribute vec3 vertexPosition;
attribute vec3 vertexNormal;

uniform mat4 modelViewMatrix;
uniform mat4 normalMatrix;
uniform mat4 projectionMatrix;

varying vec3 vN; // normal direction
varying vec3 vP; // position in eye space

void main()
{
    // As long as normalMatrix is orthonormal, no need to normalize vN here.
    // It gets normalized in the fragment shader.
    // This allows us to use the trick for smoother shading of cones.
    vN = vec3 (normalMatrix    * vec4 (vertexNormal,   0));
    vP = vec3 (modelViewMatrix * vec4 (vertexPosition, 1));
    gl_Position = projectionMatrix * vec4 (vP, 1);
}
